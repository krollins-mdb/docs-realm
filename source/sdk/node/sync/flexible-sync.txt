.. _node-flexible-sync:

=======================================
Manage Sync Subscriptions - Node.js SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Flexible Sync uses subscriptions and permissions to determine what
data to sync with your App. You must have at least one subscription before you
can read from or write to a realm with Flexible Sync enabled. This page details
how to manage those subscriptions.

You can add, update, and remove query subscriptions to control what data 
syncs to the client device. In Realm Node.s SDK v12.0.0 and later, you can
subscribe to queries instead of or in addition to manually managing
subscriptions.

You can't create subscriptions for :ref:`Data Ingest <optimize-data-ingest>` and
:ref:`asymmetric objects <node-define-an-asymmetric-object>`.

.. important:: Flexible Sync Query Limitations

   You cannot use all queries with Flexible Sync subscriptions. 
   Refer to the :ref:`Flexible Sync RQL Limitations documentation <node-flexible-sync-rql-limitations>`
   for information on which query types are not supported. 

Prerequisites
-------------

You need to meet the following requirements before you can use Atlas Device Sync
with the Node.js SDK:

- A non-sharded Atlas cluster running 
  :manual:`MongoDB 5.0 or later </release-notes/>`.
- :github:`Realm JavaScript version 10.12.0 <realm/realm-js/releases>` or later.

In addition to the requirements, you need to set up the following to use Flexible
Sync in a Node.js client:

#. :ref:`Configure Flexible Sync on the backend <enable-flexible-sync>`.
#. :ref:`Initialize the app <node-quick-start-init-app>`
#. :ref:`Authenticate a user <node-quick-start-authenticate>` in your client project.
#. :ref:`Open the synced Realm with a Flexible Sync configuration <node-flexible-sync-open-realm>`
#. :ref:`Add subscriptions to the client application <node-sync-subscribe-to-queryable-fields>`

.. _node-subscribe-api:

Subscribe to Queries
--------------------

.. versionadded:: 12.0.0

Realm Node.js v12.0.0 adds experimental APIs that subscribe to and unsubscribe
from a query's ``Results`` list. These APIs abstract away the details of
manually adding and removing subscriptions.

Subscribe to a Query
~~~~~~~~~~~~~~~~~~~~

With :ref:`an authenticated user <node-authenticate-users>` and a
:ref:`Flexible Sync configuration <node-open-a-synced-realm>`, you can open a
synced realm and query for the objects you want to read and write. You can
``.subscribe()`` to that query to create a sync subscription for objects
matching the query:

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-basic.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-basic.js
        :language: javascript

This creates an unnamed subscription and adds it to ``MutableSubscriptionSet``,
similar to :ref:`manually creating a subscription <node-sync-subscribe-to-queryable-fields>`.

Subscribe to a Query with a Subscription Name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you name your subscriptions. This makes finding and managing
your subscriptions easier. Subscription names must be unique. Trying to add a
subscription with the same name as an existing subscription throws an error.

If you do not give your subscription a name, the name
is set to :mdn:`null <Web/JavaScript/Reference/Global_Objects/null>`.

If you subscribe to the same query more than once under different names, Realm
persists both subscriptions to the subscription set.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-name.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-name.js
        :language: javascript

Wait for a Query Subscription to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you subscribe to a query's ``Results`` list, that list does not contain 
objects until it syncs. If your app creates Realm objects, you may not need to 
download synced data before the user works with it. However, if your app
requires data from the server before the user can work with it, you can
specify that a subscription should ``waitForSync``:

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-wait-first.ts
   :language: typescript

This option uses the ``FirstTime`` option, which only waits for sync to finish
when this subscription is first created. Other options include:

- ``Always``: Wait to download matching objects every time your app launches.
  The app must have an internet connection at every launch.
- ``Never``: Never wait to download matching objects. The app needs an internet
  connection for the user to authenticate the first time the app launches, but
  can :ref:`open offline <ios-open-a-synced-realm-offline>` on subsequent 
  launches using cached credentials.

You can optionally specify a ``timeout`` value:

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-with-timeout.ts
   :language: typescript

Unsubscribe from a Query
~~~~~~~~~~~~~~~~~~~~~~~~

You can unsubscribe from a query's ``Results`` list using the ``.unsubscribe()``
API:

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-unsubscribe.ts
   :language: typescript

This removes the subscription from ``MutableSubscriptionSet``,
similar to :ref:`manually removing a subscription <node-remove-subscription-by-name>`.

A ``Results`` list may still contain objects after calling ``.unsubscribe()`` 
if another subscription exists that contains overlapping objects. 

Calling ``.unsubscribe()`` does not wait for objects to be removed from the
realm. There is no API to wait for ``.unsubscribe()`` to sync with the server.

.. _node-sync-subscribe-to-queryable-fields:

Manually Manage Subscriptions
-----------------------------

You can use the :js-sdk:`Subscriptions <Realm.App.Sync.Subscription.html>` API
to manually manage a set of subscriptions to specific queries on queryable
fields.

You can:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions of a type

When data matches the subscription and has appropriate permissions, it syncs
between devices and the backend application.

When you create a subscription, Realm looks for data matching a query on a
specific object type. You can have subscriptions on several different object
types. You can also have multiple queries on the same object type.

.. important:: Object Links

   You must add both an object and its linked object to the subscription 
   set to see a linked object.
   
   If your subscription results contain an object with a property that links 
   to an object not contained in the results, the link appears to be null.
   There is no way to distinguish whether that property's value is 
   legitimately null, or whether the object it links to exists but is out of
   view of the query subscription.

Get All Subscriptions
~~~~~~~~~~~~~~~~~~~~~

When using a flexible synced realm, you can access a ``SubscriptionSet``, a
collection of subscriptions, through the :js-sdk:`realm.subscriptions <Realm.html#subscriptions>` property.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.get-subscriptions.js
    :language: javascript

.. _node-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Compose queries to your realm using the :ref:`query engine 
<react-native-client-query-engine>`.

In the following example, ``completed`` and ``progressMinutes`` have been set
as queryable fields in an App Services App. In the client code, we create
filtered queries and then subscribe to their results:

- Completed tasks
- Completed tasks that have taken over 120 ``progressMinutes``

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.subscribe-to-queryable-fields.js
   :language: javascript

.. _node-sync-bootstrap-initial-subscriptions:

Set Initial Subscriptions
`````````````````````````

You can add a subscription as part of opening a Flexible Sync realm. This is
called an initial subscription. 

To set initial subscriptions, include the ``initialSubscriptions`` field in
your realm's :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.
Within the ``initialSubscriptions`` object, add an ``update``
field set to a callback that subscribes to queries:

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.set-initial-subscriptions.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.set-initial-subscriptions.js
         :language: javascript

You can set ``rerunOnOpen`` to ``true`` to create the subscription every time
your realm is opened.

.. _node-flexible-sync-wait-for-sync:

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can check the :js-sdk:`subscription state <Realm.App.Sync.SubscriptionSet.html#state>` 
to see if the server has acknowledged the subscription and the device has
downloaded the data locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

.. include:: /includes/note-sync-state-complete.rst

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a named subscription with a new query. To update a subscriptions
query, pass the new query and a subscription option with the name of the
subscription that you want to update to the
``MutableSubscriptionSet.add()`` method. Like adding a new subscription,
you must update a subscription within a transaction by calling
``subscriptions.update()`` method.

In the following example, long-running tasks are re-defined to be any tasks that
have taken more than 180 minutes. 

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.update-subscriptions.js
    :language: javascript

.. note::

   Attempting to update a subscription that has the
   ``SubscriptionOptions.throwOnUpdate`` field set to true, throw an exception.

.. _node-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

You can remove subscriptions in several ways:

- Remove a single subscription with a specific query
- Remove a single subscription with a specific name 
- Remove all subscriptions to a specific object model
- Remove all unnamed subscriptions
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

Remove a Subscription by Query
``````````````````````````````

You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :js-sdk:`remove()
<Realm.App.Sync.MutableSubscriptionSet.html#remove>` method on the
``MutableSubscriptionSet`` within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-single-subscription.js
    :language: javascript

.. _node-remove-subscription-by-name:

Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:js-sdk:`removeByName()
<Realm.App.Sync.MutableSubscriptionSet.html#removeByName>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-name.js
    :language: javascript

Remove a Subscription by Reference
``````````````````````````````````

If you have a reference to a subscription, you can remove that subscription. To
do so, execute a transaction on the subscriptions set. Within the transaction,
pass the reference variable to the :js-sdk:`removeSubscription
<Realm.App.Sync.MutableSubscriptionSet.html#removeSubscription>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-reference.js
    :language: javascript

Remove All Subscriptions to an Object Type
``````````````````````````````````````````

To remove all subscriptions on a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :js-sdk:`removeByObjectType
<Realm.App.Sync.MutableSubscriptionSet.html#removeByObjectType>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions-of-object-type.js
    :language: javascript

Remove All Unnamed Subscriptions
`````````````````````````````````

.. versionadded:: v12.0.0

You may want to remove unnamed subscriptions that are transient or dynamically 
generated, but leave named subscriptions in place.

You can remove all unnamed subscriptions from the subscription set by 
calling ``.removeUnnamed()`` on ``mutableSubs``. ``.removeUnnamed()`` returns
the number of unnamed subscriptions removed.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-remove-unnamed.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-remove-unnamed.js
         :language: javascript

Remove All Subscriptions
````````````````````````

To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call :js-sdk:`removeAll()
<Realm.App.Sync.MutableSubscriptionSet.html#removeAll>` on the
``MutableSubscriptionSet`` within the transaction

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions.js
    :language: javascript

.. _node-flex-sync-performance-considerations:

Performance Considerations
--------------------------

API Efficiency
~~~~~~~~~~~~~~

Managing multiple subscriptions with the ``.subscribe()`` and ``.unsubscribe()``
APIs described in the :ref:`node-subscribe-api` section is less efficient than
performing batch updates when you manually manage subscriptions.

For better performance when making multiple subscription changes, use the
``subscriptions`` API described in the
:ref:`node-sync-subscribe-to-queryable-fields` section.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

.. _node-flexible-sync-rql-limitations:

Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
