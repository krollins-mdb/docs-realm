.. _node-flexible-sync:

=======================================
Manage Sync Subscriptions - Node.js SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. versionadded:: 12.0.0

Flexible Sync uses subscriptions and permissions to determine what
data to sync with your App. You must have at least one subscription before you
can read from or write to a realm with Flexible Sync enabled. This page details
how to manage those subscriptions.

To use Flexible Sync in a Node.js client:

#. :ref:`Configure Flexible Sync on the backend <enable-flexible-sync>`.
#. :ref:`Initialize the app <node-quick-start-init-app>`
#. :ref:`Authenticate a user <node-quick-start-authenticate>` in your client project.
#. :ref:`Open the synced Realm with a Flexible Sync configuration <node-flexible-sync-open-realm>`
#. :ref:`Add subscriptions to the client application <node-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to control what data 
syncs to the client device.

You can't create subscriptions for :ref:`Data Ingest <optimize-data-ingest>` and
:ref:`asymmetric objects <node-define-an-asymmetric-object>`.

.. important:: Flexible Sync Query Limitations

   You cannot use all queries with Flexible Sync subscriptions. 
   Refer to the :ref:`Flexible Sync RQL Limitations documentation <node-flexible-sync-rql-limitations>`
   for information on which query types are not supported. 

Prerequisites
-------------

You need to meet the following criteria before you can use Atlas Device Sync
with the Node.js SDK:

- A non-sharded Atlas cluster running 
  :manual:`MongoDB 5.0 or later </release-notes/>`.
- :github:`Realm JavaScript version 10.12.0 <realm/realm-js/releases>` or later.

.. _node-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When configuring Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
:js-sdk:`Subscriptions <TODO: Update to new api>` API to manage
a set of subscriptions to specific queries on queryable fields.

You can:

- Add subscriptions
- React to subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions of a type

When data matches the subscription and has appropriate permissions, it syncs
between devices and the backend application.

When you create a subscription, Realm looks for data matching a query on a
specific object type. You can have subscriptions on several different object
types. You can also have multiple queries on the same object type.

.. important:: Object Links

   You must add both an object and its linked object to the subscription 
   set to see a linked object.
   
   If your subscription results contain an object with a property that links 
   to an object not contained in the results, the link appears to be null.
   There is no way to distinguish whether that property's value is 
   legitimately null, or whether the object it links to exists but is out of
   view of the query subscription.

.. _node-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Compose queries to your realm using the :ref:`query engine 
<react-native-client-query-engine>`. Then use the :js-sdk:`Subscribe API<>` to
subscribe to the results of those queries.

In the following example, ``completed`` and ``progressMinutes`` have been set
as queryable fields in an App Services App. In the client code, we create
filtered queries and then subscribe to their results:

- Completed tasks
- Completed tasks that have taken over 120 ``progressMinutes``

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-basic.ts
   :language: typescript

Note that the ``subscribe`` method returns the results list and not the
subscription itself.

.. _node-sync-bootstrap-initial-subscriptions:

Name Your Subscriptions
```````````````````````

We recommend that you name your subscriptions. This makes finding and managing
your subscriptions easier. Subscription names must be unique. Trying to add a
subscription with the same name as an existing subscription throws an error.

If you do not give your subscription a name, the name
is set to :mdn:`null <Web/JavaScript/Reference/Global_Objects/null>`.

If you subscribe to the same query more than once under different names, Realm
persists both subscriptions to the subscription set.

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.sub-name.ts
   :language: typescript

Set Initial Subscriptions
`````````````````````````

You can add a subscription as part of opening a Flexible Sync realm. This is
called an initial subscription. 

To set initial subscriptions, include the ``initialSubscriptions`` field in
your realm's :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.
Within the ``initialSubscriptions`` object, add an ``update``
field set to a callback that subscribes to queries:

.. literalinclude:: /examples/generated/node/v12/manage-subscriptions.test.snippet.set-initial-subscriptions.ts
   :language: typescript

You can set ``rerunOnOpen`` to ``true`` to create the subscription every time
your realm is opened.

.. _node-flexible-sync-wait-for-sync:

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can check the subscription state to see if the server has acknowledged the
subscription and the device has downloaded the data locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

To the status of subscriptions, log the value of the subscription's
:js-sdk:`state <Realm.App.Sync.SubscriptionSet.html#state>`.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.log-subscription-state.js 
    :language: javascript

.. include:: /includes/note-sync-state-complete.rst

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can update a named subscription with a new query. To update a subscriptions
query, pass the new query and a subscription option with the name of the
subscription that you want to update to the
``MutableSubscriptionSet.add()`` method. Like adding a new subscription,
you must update a subscription within a transaction by calling
``subscriptions.update()`` method.

In the following example, long-running tasks are re-defined to be any tasks that
have taken more than 180 minutes. 

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.update-subscriptions.js
    :language: javascript

.. note::
 
   Attempting to update a subscription that has the
   ``SubscriptionOptions.throwOnUpdate`` field set to true, throw an exception.

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions on a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.


Remove a Subscription by Query
``````````````````````````````
You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :js-sdk:`remove()
<Realm.App.Sync.MutableSubscriptionSet.html#remove>` method on the
``MutableSubscriptionSet`` within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-single-subscription.js
    :language: javascript

Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:js-sdk:`removeByName()
<Realm.App.Sync.MutableSubscriptionSet.html#removeByName>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-name.js
    :language: javascript

Remove a Subscription by Reference
``````````````````````````````````
If you have a reference to a subscription, you can remove that subscription. To
do so, execute a transaction on the subscriptions set. Within the transaction,
pass the reference variable to the :js-sdk:`removeSubscription
<Realm.App.Sync.MutableSubscriptionSet.html#removeSubscription>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-reference.js
    :language: javascript

Remove All Subscriptions on an Object Type
``````````````````````````````````````````
To remove all subscriptions on a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :js-sdk:`removeByObjectType
<Realm.App.Sync.MutableSubscriptionSet.html#removeByObjectType>` method on the
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions-of-object-type.js
    :language: javascript

Remove All Subscriptions
````````````````````````
To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call :js-sdk:`removeAll()
<Realm.App.Sync.MutableSubscriptionSet.html#removeAll>` on the
``MutableSubscriptionSet`` within the transaction

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions.js
    :language: javascript

.. _node-flexible-sync-rql-limitations:

Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
